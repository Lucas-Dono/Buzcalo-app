// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= UBICACIÓN =============

model City {
  id        String   @id @default(uuid())
  name      String   @unique
  province  String
  country   String   @default("Argentina")

  // Coordenadas del centro de la ciudad
  latitude  Float
  longitude Float

  // Metadata
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  users User[]

  @@index([name])
}

// ============= USUARIOS =============

enum UserRole {
  CUSTOMER
  BUSINESS
  STREET_VENDOR
  SERVICE_PROVIDER
  OCCASIONAL_SELLER
}

enum AccountStatus {
  ACTIVE
  PENDING_VERIFICATION
  SUSPENDED
  BANNED
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  passwordHash String
  role         UserRole
  status       AccountStatus @default(ACTIVE)

  // Perfil
  firstName String
  lastName  String
  phone     String?
  avatarUrl String?

  // Ubicación
  cityId String
  city   City   @relation(fields: [cityId], references: [id])

  // Verificación
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?

  // Metadata
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relaciones
  business        Business?
  products        Product[]
  services        Service[]
  favorites       Favorite[]
  reviewsGiven    Review[]  @relation("ReviewAuthor")
  reviewsReceived Review[]  @relation("ReviewRecipient")

  @@index([email])
  @@index([cityId])
  @@index([role])
}

// ============= NEGOCIOS =============

model Business {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Info básica
  name        String
  slug        String  @unique
  description String?
  category    String

  // Ubicación (para BUSINESS con local)
  address   String?
  latitude  Float?
  longitude Float?

  // Para STREET_VENDOR
  usualLocations String?

  // Para SERVICE_PROVIDER
  serviceCategories String?
  coverageArea      String?

  // Contacto
  phone     String
  whatsapp  String?
  website   String?
  instagram String?
  facebook  String?

  // Horarios
  schedule Json?

  // Verificación
  verified   Boolean   @default(false)
  verifiedAt DateTime?
  cuit       String?

  // Estadísticas
  rating        Float @default(0)
  reviewCount   Int   @default(0)
  viewCount     Int   @default(0)
  favoriteCount Int   @default(0)
  productCount  Int   @default(0)
  serviceCount  Int   @default(0)

  // Plan Partner (Monetización)
  subscriptionPlan      String   @default("FREE")
  subscriptionStatus    String   @default("ACTIVE")
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  subscriptionAutoRenew Boolean  @default(false)

  // Imágenes
  logoUrl       String?
  coverImageUrl String?
  galleryImages String[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  products      Product[]
  services      Service[]
  stories       Story[]
  reviews       Review[]
  favorites     Favorite[]
  subscriptions Subscription[]

  @@index([slug])
  @@index([category])
  @@index([verified])
  @@index([rating])
  @@index([subscriptionPlan])
}

// ============= PRODUCTOS =============

enum ProductStatus {
  ACTIVE
  PAUSED
  OUT_OF_STOCK
  DELETED
}

model Product {
  id         String        @id @default(uuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String?
  business   Business?     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Info básica
  name        String
  description String
  category    String

  // Precio
  price    Float
  currency String @default("ARS")

  // Stock
  hasStock   Boolean @default(true)
  stockCount Int?

  // Imágenes
  images String[]

  // Condición
  condition String?

  // Estado
  status ProductStatus @default(ACTIVE)

  // Ubicación
  cityId String

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  viewCount Int       @default(0)

  // Relaciones
  favorites Favorite[]

  @@index([cityId])
  @@index([category])
  @@index([status])
  @@index([price])
  @@index([createdAt])
}

// ============= SERVICIOS =============

enum ServiceStatus {
  ACTIVE
  PAUSED
  DELETED
}

model Service {
  id         String        @id @default(uuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String?
  business   Business?     @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Info básica
  name        String
  description String
  category    String

  // Precio
  priceType String
  price     Float?
  priceUnit String?
  currency  String  @default("ARS")

  // Cobertura
  coverageArea String?

  // Imágenes
  images String[]

  // Estado
  status ServiceStatus @default(ACTIVE)

  // Ubicación
  cityId String

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  viewCount Int      @default(0)

  // Relaciones
  favorites Favorite[]

  @@index([cityId])
  @@index([category])
  @@index([status])
}

// ============= STORIES =============

enum StoryStatus {
  ACTIVE
  EXPIRED
  DELETED
}

model Story {
  id         String      @id @default(uuid())
  businessId String
  business   Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)

  // Contenido
  title    String
  imageUrl String

  // Link
  linkType String
  linkId   String?
  linkUrl  String?

  // Badge
  badge      String?
  badgeColor String?

  // Estado
  status StoryStatus @default(ACTIVE)

  // Expiración
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Estadísticas
  viewCount  Int @default(0)
  clickCount Int @default(0)

  @@index([businessId])
  @@index([status])
  @@index([expiresAt])
}

// ============= FAVORITOS =============

model Favorite {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  businessId String?
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, businessId])
  @@unique([userId, productId])
  @@unique([userId, serviceId])
  @@index([userId])
}

// ============= REVIEWS =============

model Review {
  id String @id @default(uuid())

  authorId String
  author   User   @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  recipientId String
  recipient   User?  @relation("ReviewRecipient", fields: [recipientId], references: [id], onDelete: Cascade)

  businessId String?
  business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)

  rating  Int
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([authorId])
  @@index([rating])
}

// ============= DENUNCIAS =============

enum ReportReason {
  SPAM
  FRAUD
  INAPPROPRIATE
  FAKE_PRODUCT
  BAD_SERVICE
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

model Report {
  id         String       @id @default(uuid())
  reporterId String

  targetType  String
  targetId    String

  reason      ReportReason
  description String?

  status ReportStatus @default(PENDING)

  reviewedBy  String?
  reviewedAt  DateTime?
  resolution  String?

  createdAt DateTime @default(now())

  @@index([status])
  @@index([targetType, targetId])
}

// ============= SUSCRIPCIONES =============

enum SubscriptionPlan {
  FREE
  PARTNER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAYMENT_PENDING
}

enum PaymentMethod {
  MERCADOPAGO
  BANK_TRANSFER
  CASH
}

model Subscription {
  id         String             @id @default(uuid())
  businessId String
  business   Business           @relation(fields: [businessId], references: [id], onDelete: Cascade)

  plan   SubscriptionPlan
  status SubscriptionStatus @default(ACTIVE)

  startDate   DateTime  @default(now())
  endDate     DateTime
  cancelledAt DateTime?

  amount        Float
  currency      String        @default("ARS")
  paymentMethod PaymentMethod
  paymentId     String?
  paymentProof  String?

  autoRenew Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([status])
  @@index([endDate])
}

// ============= PAGOS =============

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id             String        @id @default(uuid())
  businessId     String
  subscriptionId String?

  amount      Float
  currency    String        @default("ARS")
  description String

  method     PaymentMethod
  status     PaymentStatus @default(PENDING)
  externalId String?
  proofUrl   String?

  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([businessId])
  @@index([status])
  @@index([createdAt])
}
